#!/usr/bin/env python
'''
A simple utility to create and manage python virtual environments
'''
import argparse
from pathlib import Path
from subprocess import run
import pyperclip

def activate_environment(name, loc):
    '''
    copies the command to activate the said environment
    in the given location to clipboard
    name
        name of the environment
    loc
        lcation of the environment
    '''
    fname = loc / Path(name)
    if fname.exists():
        command = 'source ' + str(fname / Path('bin') / Path('activate'))
        pyperclip.copy(command)
        print('necessary command copied to clipboard')
    else:
        print('the said environment does not exist')

def delete_environment(name, loc):
    '''
    deletes the said environment in the given location
    name
        name of the environment
    loc
        lcation of the environment
    '''
    fname = loc / Path(name)
    if fname.exists():
        command = ['rm', '-rf', fname]
        run(command, capture_output=True)
    else:
        print('the said environment does not exist')

def create_environment(name, loc):
    '''
    creates the said environment in the given location
    name
        name of the environment
    loc
        lcation of the environment
    '''
    fname = loc / Path(name)
    if not fname.exists():
        command = ['python', '-m', 'venv', fname]
        run(command, capture_output=True)
    else:
        print('the said environment already exists')

def list_all_envs(loc):
    '''
    list all environments in the given location
    loc
        lcation of the environment
    '''
    envs = [env for env in loc.iterdir() if env.is_dir()]
    for env in map(str, envs):
        print(env)

def main():
    '''
    c style main function
    '''
    parser = argparse.ArgumentParser(description='utility to manage python virtual environment')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-a',
                       default=None,
                       metavar='ENV',
                       dest='activate',
                       help='activate a virtual environment')
    group.add_argument('-c',
                       default=None,
                       metavar='ENV',
                       dest='create',
                       help='create a virtual environment')
    group.add_argument('-d',
                       default=None,
                       metavar='ENV',
                       dest='delete',
                       help='delete a virtual environment')
    group.add_argument('-l',
                       action='store_true',
                       dest='list',
                       help='list all available environments in the path')
    parser.add_argument('-p',
                        default='~/lab/envs',
                        metavar='DIR',
                        dest='location',
                        help='path of virtual environments')
    args = parser.parse_args()
    args.location = Path(args.location).expanduser()
    if not args.location.is_dir():
        raise ValueError('supplied location is not a valid directory')

    if args.activate:
        activate_environment(args.activate, args.location)
    if args.create:
        create_environment(args.create, args.location)
    if args.delete:
        delete_environment(args.delete, args.location)
    if args.list:
        list_all_envs(args.location)

if __name__ == '__main__':
    main()
